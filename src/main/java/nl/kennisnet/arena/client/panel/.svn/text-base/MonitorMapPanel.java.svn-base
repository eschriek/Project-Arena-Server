package nl.kennisnet.arena.client.panel;

import java.util.List;

import nl.kennisnet.arena.client.domain.ActionDTO;
import nl.kennisnet.arena.client.domain.LogDTO;
import nl.kennisnet.arena.client.domain.QuestDTO;
import nl.kennisnet.arena.client.domain.PoiDTO;
import nl.kennisnet.arena.client.domain.QuestState;
import nl.kennisnet.arena.client.domain.SimplePoint;
import nl.kennisnet.arena.client.domain.TeamDTO;
import nl.kennisnet.arena.client.event.EventBus;
import nl.kennisnet.arena.client.event.RefreshQuestLogEvent;
import nl.kennisnet.arena.client.event.TeamFilterEvent;
import nl.kennisnet.arena.client.util.GeomUtil;
import nl.kennisnet.arena.client.widget.QuestItemMarker;

import com.google.gwt.maps.client.geom.LatLng;
import com.google.gwt.maps.client.overlay.Marker;
import com.google.gwt.maps.client.overlay.MarkerOptions;
import com.google.gwt.maps.client.overlay.PolyStyleOptions;
import com.google.gwt.maps.client.overlay.Polygon;
import com.google.gwt.maps.client.overlay.Polyline;

public class MonitorMapPanel extends AbstractMapPanel implements RefreshQuestLogEvent.Handler, TeamFilterEvent.Handler {

   public MonitorMapPanel() {
      super();
      EventBus.get().addHandler(RefreshQuestLogEvent.TYPE, this);
      EventBus.get().addHandler(TeamFilterEvent.TYPE, this);
      triggerZoomForTheFirstTime();
   }

   protected void refresh() {
      getMapWidget().clearOverlays();
      QuestDTO questDTO = QuestState.getInstance().getState();
      if (questDTO != null && questDTO.getItems() != null) {
         for (PoiDTO itemDTO : questDTO.getItems()) {
            new QuestItemMarker(getMapWidget(), itemDTO, true);
         }
      }

      if (questDTO.getBorder() != null) {
         Polygon polygon = new Polygon(GeomUtil.createGWTPolygon(questDTO.getBorder()));
         getMapWidget().addOverlay(polygon);
      }

      LogDTO log = QuestState.getInstance().getLog();
      if (log!=null){
         List<TeamDTO> teams = log.getTeams();
         // Map<String, List<ActionDTO>> actionLog =
         // QuestState.getInstance().getActionLog();
         for (TeamDTO team : teams) {
            if (QuestState.getInstance().isTeamVisible(team.getName())) {
               List<ActionDTO> teamActions = log.getTeamActions(team.getName());
               Polyline trail = createTeamTrail(teamActions);
               if (trail != null) {
                  getMapWidget().addOverlay(trail);
                  trail.setStrokeStyle(getStyleForTeam(team));
                  getMapWidget().addOverlay(createLastPositionMarker(teamActions));
               }
            }
         }
      }
   }

   private PolyStyleOptions getStyleForTeam(TeamDTO team) {
      PolyStyleOptions result = PolyStyleOptions.newInstance(team.getColor(), 2, 1.0);
      return result;
   }

   private Marker createLastPositionMarker(List<ActionDTO> actionlog) {
      ActionDTO actionDTO = actionlog.get(actionlog.size() - 1);
      MarkerOptions options = MarkerOptions.newInstance();
      options.setDraggable(false);
      options.setTitle("Laatst bekende locatie team : " + actionDTO.getTeamName());
      Marker result = new Marker(GeomUtil.createGWTPoint(actionDTO.getPoint()), options);
      return result;
   }

   private Polyline createTeamTrail(List<ActionDTO> actions) {
      if (actions != null) {
         LatLng[] result = new LatLng[actions.size()];
         for (int i = 0; i < actions.size(); i++) {
            SimplePoint point = actions.get(i).getPoint();
            result[i] = GeomUtil.createGWTPoint(point);
         }
         return new Polyline(result);
      }
      return null;
   }

   @Override
   public void onRefreshQuestLog(RefreshQuestLogEvent p) {
      refresh();
   }

   @Override
   public void onTeamFilter(TeamFilterEvent p) {
      refresh();
   }
   
   protected int getViewId() {
      return QuestState.MONITOR_VIEW;
   }
   
   public void resize(int x, int y) {
      super.resize(x,y);
      zoomIfNeeded();
   }

}
