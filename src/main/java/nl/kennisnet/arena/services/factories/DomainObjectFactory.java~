package nl.kennisnet.arena.services.factories;

import java.util.ArrayList;
import java.util.List;

import nl.kennisnet.arena.client.dialog.ImageQuestItemDialog;
import nl.kennisnet.arena.client.dialog.QuestionQuestItemDialog;
import nl.kennisnet.arena.client.dialog.StoryQuestItemDialog;
import nl.kennisnet.arena.client.dialog.VideoQuestItemDialog;
import nl.kennisnet.arena.client.domain.QuestDTO;
import nl.kennisnet.arena.client.domain.PoiDTO;
import nl.kennisnet.arena.client.domain.RoundDTO;
import nl.kennisnet.arena.client.elements.Element;
import nl.kennisnet.arena.client.elements.ImageElement;
import nl.kennisnet.arena.client.elements.QuestionElement;
import nl.kennisnet.arena.client.elements.StoryElement;
import nl.kennisnet.arena.client.elements.VideoElement;
import nl.kennisnet.arena.model.Image;
import nl.kennisnet.arena.model.Information;
import nl.kennisnet.arena.model.Location;
import nl.kennisnet.arena.model.Object3D;
import nl.kennisnet.arena.model.Positionable;
import nl.kennisnet.arena.model.Quest;
import nl.kennisnet.arena.model.Question;
import nl.kennisnet.arena.model.Round;
import nl.kennisnet.arena.model.Type;
import nl.kennisnet.arena.model.Video;

public class DomainObjectFactory {

	public static Quest create(QuestDTO questDTO) {
		Quest result = new Quest();
<<<<<<< HEAD
		// result.setId(questDTO.getId());
=======
>>>>>>> 50423c321a4e1a6e036d4dc35267e4004ceab9ef
		result.setName(questDTO.getName());
		result.setEmailOwner(questDTO.getEmailOwner());
		if (questDTO.getItems() != null) {
			List<Positionable> items = new ArrayList<Positionable>();
			for (PoiDTO PoiDTO : questDTO.getItems()) {
				Positionable positionable = create(PoiDTO, result);
				if (positionable != null) {
					items.add(positionable);
				}

			}
			result.setPositionables(items);
		}

		result.setBorder(GeomUtil.createJTSPolygon(questDTO.getBorder()));
		result.getRounds().clear();
		for (RoundDTO round : questDTO.getRounds()) {
			result.addRound(new Round(round.getId(), round.getName(), result));
		}
		if (result.getRounds().size() > 0) {
			result.setActiveRound(result.getRounds().get(0));
		}
		return result;
	}

	private static Positionable create(PoiDTO PoiDTO, Quest quest) {
		Positionable result = new Positionable();
		for (Element e : PoiDTO.getElements()) {
			if (e instanceof ImageElement) {
				Image img = new Image();
				img.setPoi(result);
				img.setUrl(((ImageElement) e).getLink());
				result.getElements().add(img);
			} else if (e instanceof StoryElement) {
				Information info = new Information();
				info.setPoi(result);
				info.setText(((StoryElement) e).getDescription());
				result.getElements().add(info);
			} else if (e instanceof QuestionElement) {
				Question q = new Question(
						((QuestionElement) e).getDescription(),
						((QuestionElement) e).getOption1(),
						((QuestionElement) e).getOption2(),
						((QuestionElement) e).getOption3(),
						((QuestionElement) e).getOption4(),
						((QuestionElement) e).getQuestionType());
				q.setCorrectAnswer(((QuestionElement) e).getCorrectOption());
				q.setPoi(result);
				result.getElements().add(q);

			} else if (e instanceof VideoElement) {
				Video vid = new Video();
				vid.setPoi(result);
				vid.setVideoUrl(((VideoElement) e).getUrl());
				result.getElements().add(vid);
			}

		}

		if (result != null) {
			result.setName(PoiDTO.getName());
			Location location = new Location(GeomUtil.createJTSPoint(PoiDTO
					.getPoint()), PoiDTO.getAlt(), PoiDTO.getRadius(),
					PoiDTO.getVisibleRadius());
			result.setLocation(location);
		}
		result.setQuest(quest);
		return result;
	}

	private static List<Positionable> positionablesToDelete(
			List<Positionable> posList, List<PoiDTO> itemDTOList) {
		List<Positionable> removeList = new ArrayList<Positionable>();
		for (Positionable pos : posList) {
			boolean exist = false;
			for (PoiDTO item : itemDTOList) {
				if (pos.getId().equals(item.getId())) {
					exist = true;
				}
			}
			if (!exist) {
				removeList.add(pos);
			}
		}
		return removeList;
	}

	public static Quest update(QuestDTO questDTO, Quest originalQuest) {
		Quest quest = originalQuest;
		quest.setName(questDTO.getName());

		for (Positionable pos : positionablesToDelete(quest.getPositionables(),
				questDTO.getItems())) {
			quest.getPositionables().remove(pos);
		}

		if (questDTO.getItems() != null) {
<<<<<<< HEAD
			for (PoiDTO PoiDTO : questDTO.getItems()) {
				if (PoiDTO.getId() != null) {
					System.out.println(">>>>>>>>>>>>>>>>>>> DTO ID: "
							+ PoiDTO.getId());
					for (Positionable found : quest.getPositionables()) {
						System.out.println("FOUND ID: " + found.getId());
						if (found.getId().equals(PoiDTO.getId())) {
							System.out.println("GEVONDEN");
							updatePositionable(found, PoiDTO);
=======
			for (QuestItemDTO questItemDTO : questDTO.getItems()) {
				if (questItemDTO.getId() != null) {
					for (Positionable found : quest.getPositionables()) {
						if (found.getId().equals(questItemDTO.getId())) {
							updatePositionable(found, questItemDTO);
>>>>>>> 50423c321a4e1a6e036d4dc35267e4004ceab9ef
						}
					}
				} else {
					Positionable positionable = create(PoiDTO, quest);
					positionable.setQuest(quest);
					quest.getPositionables().add(positionable);

				}
			}
		}

		quest.setBorder(GeomUtil.createJTSPolygon(questDTO.getBorder()));
		RoundDTO activeRoundDTO = questDTO.getActiveRound();
		if (activeRoundDTO != null) {
			quest.setActiveRound(new Round(activeRoundDTO.getId(),
					activeRoundDTO.getName(), quest));
		}
		quest.getRounds().clear();
		for (RoundDTO round : questDTO.getRounds()) {
			Round r = new Round(round.getId(), round.getName(), quest);
			quest.addRound(r);
		}

		return quest;
	}

	private static void updatePositionable(Positionable positionable,
			PoiDTO PoiDTO) {

		// TODO:

		// if (positionable instanceof Information) {
		// ((Information) positionable).setName(PoiDTO.getName());
		// ((Information) positionable).setText((PoiDTO.getDescription()));
		// } else if (positionable instanceof Question) {
		// ((Question) positionable).setText(PoiDTO.getDescription());
		// ((Question) positionable).setAnswer1(PoiDTO.getOption1());
		// ((Question) positionable).setAnswer2(PoiDTO.getOption2());
		// ((Question) positionable).setAnswer3(PoiDTO.getOption3());
		// ((Question) positionable).setAnswer4(PoiDTO.getOption4());
		// ((Question) positionable)
		// .setQuestionType((PoiDTO.getQuestionType()));
		// ((Question) positionable).setCorrectAnswer(PoiDTO
		// .getCorrectOption());
		// } else if (positionable instanceof Image) {
		// ((Image) positionable).setUrl(PoiDTO.getObjectURL());
		// } else if (positionable instanceof Video) {
		// ((Video) positionable).setVideoUrl(PoiDTO.getObjectURL());
		// } else if (positionable instanceof Object3D) {
		// ((Object3D) positionable).setUrl(PoiDTO.getObjectURL());
		// }
		// } else if (positionable instanceof Combined) {
		// ((Combined) positionable).setItems(PoiDTO.getItems());
		// }

		positionable.setName(PoiDTO.getName());
		Location location = new Location(GeomUtil.createJTSPoint(PoiDTO
				.getPoint()), PoiDTO.getAlt(), PoiDTO.getRadius(),
				PoiDTO.getVisibleRadius());
		positionable.setLocation(location);
	}

	public static List<Positionable> delete(Quest quest, Quest originalQuest) {
		List<Positionable> result = new ArrayList<Positionable>();
		for (Positionable originalPos : originalQuest.getPositionables()) {
			if (!quest.getPositionables().contains(originalPos)) {
				result.add(originalPos);
			}
		}
		return result;
	}

}
